$OpenBSD$
--- dart/runtime/bin/file_android.cc.orig	Sat Apr 25 19:16:38 2015
+++ dart/runtime/bin/file_android.cc	Sat Apr 25 19:22:46 2015
@@ -3,7 +3,7 @@
 // BSD-style license that can be found in the LICENSE file.
 
 #include "platform/globals.h"
-#if defined(TARGET_OS_ANDROID)
+#if defined(TARGET_OS_ANDROID) || defined(__OpenBSD__)
 
 #include "bin/file.h"
 
@@ -11,7 +11,6 @@
 #include <fcntl.h>  // NOLINT
 #include <sys/stat.h>  // NOLINT
 #include <sys/types.h>  // NOLINT
-#include <sys/sendfile.h>  // NOLINT
 #include <unistd.h>  // NOLINT
 #include <libgen.h>  // NOLINT
 
@@ -89,13 +88,13 @@ int64_t File::Write(const void* buffer, int64_t num_by
 
 int64_t File::Position() {
   ASSERT(handle_->fd() >= 0);
-  return NO_RETRY_EXPECTED(lseek64(handle_->fd(), 0, SEEK_CUR));
+  return NO_RETRY_EXPECTED(lseek(handle_->fd(), 0, SEEK_CUR));
 }
 
 
 bool File::SetPosition(int64_t position) {
   ASSERT(handle_->fd() >= 0);
-  return NO_RETRY_EXPECTED(lseek64(handle_->fd(), position, SEEK_SET)) >= 0;
+  return NO_RETRY_EXPECTED(lseek(handle_->fd(), position, SEEK_SET)) >= 0;
 }
 
 
@@ -169,7 +168,7 @@ File* File::Open(const char* name, FileOpenMode mode) 
     return NULL;
   }
   if (((mode & kWrite) != 0) && ((mode & kTruncate) == 0)) {
-    int64_t position = lseek64(fd, 0, SEEK_END);
+    int64_t position = lseek(fd, 0, SEEK_END);
     if (position < 0) {
       return NULL;
     }
@@ -275,28 +274,20 @@ bool File::Copy(const char* old_path, const char* new_
       VOID_TEMP_FAILURE_RETRY(close(old_fd));
       return false;
     }
-    off_t offset = 0;
+
     int result = 1;
-    while (result > 0) {
-      // Loop to ensure we copy everything, and not only up to 2GB.
-      result = NO_RETRY_EXPECTED(
-          sendfile(new_fd, old_fd, &offset, kMaxUint32));
-    }
-    // From sendfile man pages:
-    //   Applications may wish to fall back to read(2)/write(2) in the case
-    //   where sendfile() fails with EINVAL or ENOSYS.
-    if (result < 0 && (errno == EINVAL || errno == ENOSYS)) {
-      const intptr_t kBufferSize = 8 * KB;
-      uint8_t buffer[kBufferSize];
-      while ((result = TEMP_FAILURE_RETRY(
-          read(old_fd, buffer, kBufferSize))) > 0) {
-        int wrote = TEMP_FAILURE_RETRY(write(new_fd, buffer, result));
-        if (wrote != result) {
-          result = -1;
-          break;
-        }
+    // OpenBSD has no sendfile so use read(2)/write(2) to copy the file
+    const intptr_t kBufferSize = 8 * KB;
+    uint8_t buffer[kBufferSize];
+    while ((result = TEMP_FAILURE_RETRY(
+        read(old_fd, buffer, kBufferSize))) > 0) {
+      int wrote = TEMP_FAILURE_RETRY(write(new_fd, buffer, result));
+      if (wrote != result) {
+        result = -1;
+        break;
       }
     }
+
     int e = errno;
     VOID_TEMP_FAILURE_RETRY(close(old_fd));
     VOID_TEMP_FAILURE_RETRY(close(new_fd));
